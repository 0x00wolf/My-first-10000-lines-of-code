

scp ~send files to a remote box via ssh~

copy from remote host to local:
	$ scp username@from_remote_host:file.txt /local/directory/<desired_filename>
copy from local host to remote host
	$ scp file.txt username@to_remote_host:/remote/directory/
copy directory from a remote host to a local host
	$ scp -r username@remote_host:/remote/directory/ /local/directory/
copy directory from a local host to a remote host
	$ scp -r /local/directory/ username@remote_host:/remote/directory/


Create a python http server in current wd~

$ python(3) -m http.server
use wget to download file from remote client
wget http://<remote.ip.address.1.>:/full/path/and/filename.file


Active Recon:
ping, traceroute, telnet, nc 

~NMAP LIVIN~
1. Enumerate Hosts
2. Discover Live Hosts
3. Reverse-DNS Lookup
4. Scan ports
5. Detect Versions
6. Detect OS
7. Traceroute
8. Scripts
9. Write Output


1/2.
=>ARP scan example:
$ sudo nmap -PR -sn MACHINE_IP/24
	* -sn scan for live hosts without port scanning
	** Another UNIX tool for this is 'arp-scan'
=>ICMP echo scan example:
$ sudo nmap -PE -sn MACHINE_IP/24
	* if scan is done from same subnet will get mac addresses
	* echo scans are often blocked, can use:
=>ICMP timestamp scan ex.:
$ sudo namap -PP -sn MACHINE_IP/24
* or
=>ICMP address mask scan ex.:	
$ sudo nmap -PM -sn MACHINE_IP/24
=>TCP Syn ping scan ex.:
$ sudo nmap -PS22,80,443 -sn MACHINE_IP/30
	* specifically probing ports 22,80, and 443 in this example
	* if no ports are specified scans entire subnet (/30 in this case)
=>TCP ACK ping scan ex.:
$ sudo nmap -PA22,80,443 -sn MACHINE_IP/30
=>UDP ping scan ex.:
$ sudo nmap -PU53,161,162 -sn MACHINE_IP/30

-USE -sn ~if you are only interested in discovering a host without port-scanning
-n ~no DNS lookup


3.
=>Reverse DNS Lookup
-R ~reverse-DNS lookup for all hosts
-sn ~host discovery only

### PASSIVE RECON ###
whois
nslookup
dig

whois:
-lookup WHOIS record
ex:	whois tryhackme.com

nslookup:
-lookup DNS record
ex:	nslookup -type=A tryhackme.com
-lookup DNS MX records at DNS server
ex:	nslookup -type=mx tryhackme.com 1.1.1.1
-lookup DNS TXT
ex:	nslookup -type=TXT tryhackme.com

dig:
-lookup DNS A
ex:	dig tryhackme.com A
-lookup DNS MX records at DNS server
ex:	dig @1.1.1.1 tryhackme.com MX
-lookup DNS TXT records
ex:	dig tryhackme.com TXT


4. Scanning ports

TCP - Transmission Control Protocol
=>Test if TCP PORT is open:
ex:	nmap -sT <TARGET>
-packet order: host:syn, server:syn/ack, host:ack, host:rst/ack

*-F enables fastmode, decreases num of standard ports scanned from 1000 to 100
*-r can be added to scan ports in consecutive order instead of a random order

=>SYN packet only scan
ex:	-sudo nmap -sS <TARGET>
-packet order: host: syn, server:syn/ack, host:rst

UDP - User Datagram Protocol
=>UDP scan
ex:	-sudo nmap -sU <TARGET>
packet order: host:udp packet
responses:code 3 - port unreachable, or nothing (open).


4b. Tuning scans
To specify port: -p<port>,<next port>, <etc>
To specify a range of ports (ex.): -p1-1023
To scan all ports: -p-
To fast scan the most common 100 ports: -F
	or, another option: --top-ports 10
Scan timing control: -T<0-5>
	slowest time: -T0
	fastest time: -T5
Time Codes:
	paranoid (-T0)
	sneaky (-T1)
	polite (-T2)
	normal (-T3)
	aggresive (-T4)	
	insane (-T5)
example script would be a T0 every 5 minutes on one port at a time
normal speed is -T3
ctfs often use -T4
real engagements -T1

Controlling packet rate: --min-rate <number> 
	and, --max-rate <number>
ex of no more than ten packets per second:	
	--max-rate 10 or max-rate=10

Controlling probing parallelization: --min-parallelism <numprobes>
	and, --max-parallelism <numprobes>
	ex: --min-parallelism=512


4c. Advanced nmap Scans


=> Null Scan - TCP scan with no flags set
sudo nmap -sN <target>
The target will respond with an RST packet if the port is closed
A lack of an RST flag will indicate that the the ports are not closed
ie open or filtered
*requires root


=> FIN Scan - TCP packetwith a FIN flag set
sudo nmap -sF <target>
-If no response the tcp port is open or filtered
-Firewalls will silently drop the traffic without sending an RST
-Target systems will respond with RST if the port is closed


=> XMAS Scan - named after christmas tree lights
-sets the FIN, PSH, and URG flags simultaneously
sudo nmap -sX <target>
-If an RST packet is recevied the port is closed
-Otherwise it is reported open/filtered
-If scanning a target behind a stateless firewall it is
possible to deceive the firewall and reach the system behind it.
-Stateless firewalls will check if the incoming packet has the SYN
flag set to detect a connection attempt.
-Stateful firewalls will block all ushc crafted packets and render
this scan useless


=> Maimon Scan
Sends a FIN/ACK, the target should send a RST, but certain BSD systems
drop the packet if the port is open. Won't work on most targets
sudo nmap -sM <target>


=> TCP ACK Scan
sudo nmap -sA <target>
Won't show any open ports.
Useful if a firewall is infront of your target
Will tell you what ports are were not blocked by the firewall


=> TCP Window Scan
sudo nmap -sW <target>
Almost the same as the TCP ACK Scan.
On specific systems this can reveal that the scanned port is open.
Examinesthe TCP window field of the RST packets returned.
On a linux system w/o a firewall this will reveal verhy  little.


=> CUSTOM Scan
To experiment with TCP Flag combinations beyond the built in TCP Scan Types
use --scanflags
ex: --scanflags RSTSYNFIN 	to send RST, SYN, and FIN packets
You need to know how the different ports will interpret the results in different scenarios
correctly


=> Spoofing the IP source of a packet
nmap -S <spoofed_ip> <target_ip>
The scanned server will send the results back to the spoofed IP
If you are scanning the network traffic this is a good way to stay anonymous
Otherwise you will fail to capture the packet response
ex:	nmap -e NET_INTERFACE -Pn -S SPOOFED_IP TARGET_IP
-e to specify the NET_INTERFACE
-Pn to explicitly disable ping scanning

=> Spoofing the MAC Address if on the same subnet
--spoof-mac SPOOFED_MAC
Spoofing the MAC only works if on the same ethernet or wifi network

=> Spoofing multiple sources of the scan to obfuscate
nmap -D DECOY1,ME,DECOY2 MACHINE_IP
You can launch a decoy scan by specifying an IP address(es) after -D
ex:	nmap -D 10.10.0.1,10.10.0.2,ME 10.10.77.35
ex2:	nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME 10.10.77.35
RND sets a random ip address

=> Fragmenting Packets
-f to fragment packets into 8 bytes or less
-ff to send 16 byte-fragments
Increasing the size of a packet: --data-length NUM
where NUM represents the number of packets that you want to append


=>Idle/Zombie Scan
Using an idle host as the source ip to gain 
network recon anonymously
nmap -sI <Zombie_ip> <target_ip>


=> More Details
--reason	for details
-v or -vv	for more verbosity
-d or -dd	for debugging 


5. Check Versions
-sV 	
to add service and version information for open ports

--version-intensity LEVEL
level ranges from 0 to 9

-sV --version-light
intensity level of 2

-sV --version-all
has an intensity level of 9

*-sV forces the TCP 3-way handshake, doesn't work with -sS


6. OS Version
-O
ex:	nmap -sS -O 10.10.103.90
detects OS based on behavior
can be performed without the TCP handshake
take results with a grain of salt


7. Traceroute
--traceroute
ex nmap -sS --traceroute 10.10.103.90


8. Scripting
Running default scripts
--script-default
or, -sc
Usage ex.:
sudo nmap -sS -sC 10.10.254.4
examples 2-3:
sudo nmap -sS -n --script "http-date" 10.10.254.4
sudo nmap -sS -n --script "ftp*" 10.10.254.4

Other categories:	|Description:
auth			-Authentication related scripts
broadcast		-Discover hosts by sending broadcast messages
brute			-Performs brute-force password auditing against logins
default			-Default scripts, same as -sC
dos			-Detects servers vulnerable to Denial of Service (DoS)
exploit			-Attempts to exploit various vulnerable services
external		-Checks using a third-party servcice (ex. Geoplugin + Virustotal)
fuzzer			-Launch fuzzing attacks
intrusive		-Intrusive scripts such as brute-force attacks and exploitation
malware			-Scans for backdoors
safe			-Safe scripts that won't crash the target
version			-Retrieve service versions
vuln			-Checks for vulnerabilities or exploit vulnerable services


9. Saving Output
Three formats for output - Normal, Grepable, XML
Alternative: Script Kiddie

Normal format:
-oN FILENAME

Creating Grepable output:
-oG FILENAME
Usage:
grep KEYWORD TEXT_FILE

XML format usage:
-oX FILENAME
Good for sending output to other programs

Saving output in all 3 filenames:
-oA FILENAME
Combines -oN -oG and -oX

Script Kiddie format:
-oS FILENAME
ex:	nmap -sS 127.0.0.1 -oS FILENAME
Makes output l337.4.f




=> nmap Cheat Sheet
TCP Null scan		sudo nmap -sN 10.10.32.5
TCP FIN scan		sudo nmap -sF 10.10.32.5
TCP XMAS scan		sudo nmap -sX 10.10.32.5
TCP Maimon scan		sudo nmap -sM 10.10.32.5
TCP ACK scan		sudo nmap -sA 10.10.32.5
TCP Window scan		sudo nmap -sW 10.10.32.5
Custom TCP scan		sudo nmap --scanflags URGACKPSHRSTSYNFIN 10.10.32.5
Soofed Source IP	sudo nmap -S SPOOFED_IP 10.10.32.5
Spoofed Mac Address	--spoof-mac SPOOFED_MAC
Decoy Scan		nmap -D DECOY_IP,ME 10.10.32.5
IDLE (Zombie) Scan	sudo nmap -sI ZOMBIE_IP 10.10.32.5
Fragment IP data 8bits	-f
		 16bits	-ff
Options:
--source-port PORT_NUM	specify a source port
--data-length NUM	append random data to reach given length
--reason		explains how NMAP made it's conclusion
-v			verbose
-vv			very verbose
-d			debugging
-dd			more details for debugging
-sV			determine service/version info on open ports
-sV --version-light	try the most likely probes (2)
-sV --version-all	try all probes available (9)
-O			detecet OS
--traceroute		run a traceroute to the target
--scripts=SCRIPTS	nmap scripts to run
-sC or, 
--script=default	run defaults scripts	
-A 			equivalent to -sV -O -sC --traceroute
-oN OUTPUT		save output in normal format
-oG OUTPUT		save output in greppable format
-oX OUTPUT		save output in XML format
-oA OUTPUT		save output in normal, XML, and Grepable formats



