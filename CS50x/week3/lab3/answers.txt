sort1 uses: Bubble sort

How do you know?: Because bubble sort has big omega of n to the power of 2, so that all spreads should have similar time throughout. It is the slowest with larger datasets which was evident from its running time with random50000.txt in particular. It can also be among the fastest, with big O of n, evident from Sorted50000.txt

sort2 uses: Merge sort

How do you know?: Merge sort has big omega of n to the power of 2, and also will vastly outperform the other two sorting algorithms in larger datasets. This was evident in the marginal increase in time it took to perform the sorting function on more complex datasets like random and reversed.

sort3 uses: Selection Sort

How do you know?: Selection sort has asymptotic notation of big omega n to the power of two. As such it will generally yield similar results based on the size of the dataset. It is also somewhat faster than bubble sort in working through large datasets. I ran numerous tests of the largest datasets using a calculator program I made to combine the sys and user runtimes to get a sense of the performance of each program.